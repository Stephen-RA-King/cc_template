{% if cookiecutter.use_bump2version == 'y' -%}
[bumpversion]
current_version = {{ cookiecutter.version }}
commit = True
tag = True

[bumpversion:file:setup.cfg]
search = version='{current_version}'
replace = version='{new_version}'

[bumpversion:file:src/{{ cookiecutter.pkg_name }}/__init__.py]
search = __version__ = '{current_version}'
replace = __version__ = '{new_version}'
{%- endif %}


[metadata]
name = {{ cookiecutter.pkg_name }}
author = {{ cookiecutter.author_name.replace("\"", "\\\"") }}
author_email = {{ cookiecutter.email }}
maintainer = {{ cookiecutter.author_name.replace("\"", "\\\"") }}
maintainer_email = {{ cookiecutter.email }}

# keep in sync with src/{{ cookiecutter.pkg_name }}/__init__.py
version = {{ cookiecutter.version }}

description = {{ cookiecutter.project_short_description.replace("\'", "\\\'") }}
long_description = file: README.md
long_description_content_type = text/markdown
keywords = utility,

platforms = Linux
url =
download_url =
license = {{ cookiecutter.license }}

# https://pypi.org/pypi?%3Aaction=list_classifiers
classifiers =
    Development Status :: 1 - Planning
    Environment :: Console
    Intended Audience :: Developers
    Natural Language :: English
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3 :: Only
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9

[options]
package_dir=
    =src
packages=find:
include_package_data = True
python_requires = >=3.7
install_requires =

[options.packages.find]
where=src

[options.entry_points]
console_scripts =
    {{ cookiecutter.project_slug }} = {{ cookiecutter.project_slug }}.cli:entry_point


{% if cookiecutter.use_flake8 == 'y' -%}
[flake8]
# https://flake8.pycqa.org/en/latest/user/options.html
# flake8 - F401-F901
# flake8-comprehensions - C400-C416
# flake8-bugbear - B001-B018, B901-B950
# flake8-docstrings - D100-D418 (flake8 plugin for pydocstyle)
# pycodestyle - E101-E902, W191-W606
# pep8-naming - N801-N818
docstring-convention = {{ cookiecutter.docstrings_style }}
max-complexity = 18
max-line-length = 88
select = B, B9, C, D, E, F, N, W
exclude = tests/*,.tox/*,.nox/*,docs/*,.git/*,.github/*
ignore =
    # pycodestyle - whitespace before ‘,’, ‘;’, or ‘:’ - to be compatible with black
    E203,
    # pycodestyle - line break before binary operator
    W503,
per-file-ignores =
    # flake8 - module imported but not used
    __init__.py:F401
    pathmagic.py:F401
    test_{{ cookiecutter.pkg_name }}.py:F401
{%- endif %}

{% if cookiecutter.use_isort == 'y' -%}
[isort]
import_heading_stdlib=Core Library modules
import_heading_thirdparty=Third party modules
import_heading_firstparty=First party modules
import_heading_localfolder=Local modules
include_trailing_comma=True
indent='    '
known_third_party = click,pytest,setuptools,pip-tools,pre-commit,
known_first_party = pathmagic,
length_sort=0
line_length=80
multi_line_output=3
force_grid_wrap=0
use_parentheses = True
ensure_newline_before_comments = True
balanced_wrapping=true
combine_as_imports=true
not_skip=__init__.py
{%- endif %}

{% if cookiecutter.use_mypy == 'y' -%}
[mypy]
ignore_missing_imports=true
check_untyped_defs=true
disallow_untyped_defs=false
warn_unused_ignores=true
strict_optional=true
warn_redundant_casts=true
warn_unused_configs=true
disallow_untyped_calls=false
disallow_incomplete_defs=true
follow_imports=skip
html_report=mypy-report
mypy_path=typeshed/pyi:typeshed/imports
{%- endif %}
